- id: hans_night_light_off
  alias: Hans Night Light Off
  description: Turn off the light every hour from midnight to 6 a.m.
  triggers:
    - trigger: time_pattern
      minutes: '0'
      seconds: '0'
  conditions:
    - condition: time
      after: '00:00:00'
      before: '06:00:00'
  actions:
    - action: light.turn_off
      target:
        device_id: 54d1e5e77af5d9e88f5d090ab3027444
  mode: single

- id: iphone_12_pro_location_monitor
  alias: iPhone 12 Pro Location Change
  description: Notify when iPhone leaves home during daytime and battery > 15%
  triggers:
    - trigger: state
      entity_id: device_tracker.iphone12pro
      to: not_home
      for: 00:05:00
  conditions:
    - condition: time
      after: '07:00:00'
      before: '22:00:00'
    - condition: numeric_state
      entity_id: sensor.iphone_12_pro_battery_level
      above: 15
  actions:
    - action: notify.mobile_app_iphone_12_pro
      data:
        title: Device Location Alert
        message: "iPhone 12 Pro left home at {{ now().strftime('%H:%M') }}. Battery: {{ states('sensor.iphone_12_pro_battery_level') }}%"
        data:
          push:
            sound: default
    - action: persistent_notification.create
      data:
        title: Device Left Home
        message: iPhone 12 Pro left home zone
  mode: single

- id: co2_monitor_all_rooms
  alias: CO2 Monitor – All Rooms
  description: Monitors CO2 for multiple rooms with anti-spam flags; special tiers for Bedroom
  variables:
    rooms:
      living_room:
        sensor: sensor.living_room_station_carbon_dioxide
        flag: input_boolean.living_room_co2_high_alert
        name: Living Room
      office:
        sensor: sensor.living_room_station_office_carbon_dioxide
        flag: input_boolean.office_co2_high_alert
        name: Office
      kids:
        sensor: sensor.living_room_station_hans_carbon_dioxide
        flag: input_boolean.kids_room_co2_high_alert
        name: Kids Room
      bedroom:
        sensor: sensor.living_room_station_bedroom_carbon_dioxide
        flag: input_boolean.bedroom_co2_high_alert
        name: Bedroom
    room_key: >
      {% set ent = trigger.entity_id %}
      {% for k, v in rooms.items() %}
        {% if v.sensor == ent %}{{ k }}{% endif %}
      {% endfor %}
    room_name: "{{ rooms[room_key].name if room_key in rooms else 'Room' }}"
    flag: "{{ rooms[room_key].flag if room_key in rooms else none }}"
    co2_level: "{{ trigger.to_state.state | float(0) | round(0) }}"
  trigger:
    - platform: numeric_state
      entity_id:
        - sensor.living_room_station_carbon_dioxide
        - sensor.living_room_station_office_carbon_dioxide
        - sensor.living_room_station_hans_carbon_dioxide
        - sensor.living_room_station_bedroom_carbon_dioxide
      above: 1000
      for: "00:05:00"
      id: high
    - platform: numeric_state
      entity_id:
        - sensor.living_room_station_carbon_dioxide
        - sensor.living_room_station_office_carbon_dioxide
        - sensor.living_room_station_hans_carbon_dioxide
        - sensor.living_room_station_bedroom_carbon_dioxide
      below: 800
      for: "00:02:00"
      id: normal
  condition:
    - condition: template
      value_template: "{{ trigger is defined and has_value(trigger.entity_id) }}"
  action:
    - choose:
        - conditions:
            - condition: trigger
              id: normal
            - condition: template
              value_template: "{{ flag is not none and is_state(flag, 'on') }}"
          sequence:
            - service: notify.notify
              data:
                title: "{{ room_name }} CO2 Levels Normal"
                message: "{{ room_name }} CO2 has returned to normal: {{ co2_level }} ppm"
            - service: input_boolean.turn_off
              target:
                entity_id: "{{ flag }}"
        - conditions:
            - condition: trigger
              id: high
            - condition: template
              value_template: "{{ flag is not none and is_state(flag, 'off') }}"
          sequence:
            - choose:
                - conditions:
                    - condition: template
                      value_template: "{{ room_key == 'bedroom' and co2_level >= 2000 }}"
                  sequence:
                    - service: notify.notify
                      data:
                        title: "Bedroom High CO2 Warning"
                        message: "CO2 level in the bedroom is very high: {{ co2_level }} ppm. Starting emergency ventilation."
                        data:
                          priority: high
                          ttl: 0
                - conditions:
                    - condition: template
                      value_template: "{{ room_key == 'bedroom' and co2_level >= 1500 }}"
                  sequence:
                    - service: notify.notify
                      data:
                        title: "Bedroom CO2 Warning"
                        message: "WARNING: CO2 level very high: {{ co2_level }} ppm. Consider ventilation."
                        data:
                          priority: high
                          ttl: 0
              default:
                - service: notify.notify
                  data:
                    title: "{{ room_name }} High CO2 Warning"
                    message: "CO2 level is high: {{ co2_level }} ppm. Please ventilate the room."
                    data:
                      priority: high
                      ttl: 0
            - service: input_boolean.turn_on
              target:
                entity_id: "{{ flag }}"
  mode: restart


- id: dishwasher_ready
  alias: Dishwasher ready
  description: Notification when dishwasher finishes after a cycle
  triggers:
    - trigger: numeric_state
      entity_id: sensor.smart_plug_1908212877531725185548e1e90233ca_power
      below: 1
      for: 00:05:00
  conditions:
    - condition: state
      entity_id: input_boolean.dishwasher_running
      state: 'on'
  actions:
    - action: notify.notify
      data:
        message: Dishwasher is ready!
    - action: input_boolean.turn_off
      target:
        entity_id: input_boolean.dishwasher_running
  mode: single

- id: laundry_finished
  alias: Laundry finished
  description: Notification when laundry finishes after a cycle
  triggers:
    - trigger: numeric_state
      entity_id: sensor.smart_plug_19011801871415251h0334298f1a2070_power
      below: 10
      for: 00:01:00
  conditions:
    - condition: state
      entity_id: input_boolean.laundry_running
      state: 'on'
  actions:
    - action: notify.notify
      data:
        message: Laundry is ready!
    - action: input_boolean.turn_off
      target:
        entity_id: input_boolean.laundry_running
  mode: single

- id: daily_energy_report_1059pm
  alias: Daily Energy Report
  description: Sends a daily energy report notification at 22:59
  triggers:
    - trigger: time
      at: '22:59:00'
  conditions:
    - condition: template
      value_template: "{{ has_value('sensor.daily_solar_production') and has_value('sensor.daily_grid_import') }}"
  actions:
    - variables:
        solar_production: "{{ states('sensor.daily_solar_production') | float(0) }}"
        grid_import: "{{ states('sensor.daily_grid_import') | float(0) }}"
        grid_export: "{{ states('sensor.daily_grid_export') | float(0) }}"
        self_consumed_solar: "{{ states('sensor.self_consumed_solar_energy_today') | float(0) }}"
        price: 0.3370
        total_home_usage: "{{ (self_consumed_solar + grid_import) | round(2) }}"
        amount_saved: "{{ (self_consumed_solar * price) | round(2) }}"
    - action: notify.notify
      data:
        title: "📊 Daily Energy Report"
        message: >
          Energy Summary for Today:
          
          Solar Production: {{ solar_production | round(2) }} kWh
          Grid Import: {{ grid_import | round(2) }} kWh
          Grid Export: {{ grid_export | round(2) }} kWh
          Self-Consumed Solar: {{ self_consumed_solar | round(2) }} kWh
          Amount Saved: €{{ '%.2f' | format(amount_saved) }}
          Total Home Usage: {{ total_home_usage }} kWh
          
          {% if solar_production > 0 -%}
          Self-Consumption Rate: {{ (self_consumed_solar / solar_production * 100) | round(1) }}%
          {%- else -%}
          Self-Consumption Rate: N/A (No solar production)
          {%- endif %}
          
          {% if total_home_usage > 0 -%}
          Self-Sufficiency Rate: {{ (self_consumed_solar / total_home_usage * 100) | round(1) }}%
          {%- else -%}
          Self-Sufficiency Rate: N/A (No home usage)
          {%- endif %}
  mode: single

- id: daily_weather_report_0735
  alias: Daily Weather Report
  description: Sends a daily weather report notification with comprehensive outdoor conditions
  triggers:
    - trigger: time
      at: '07:35:00'
  conditions:
    - condition: template
      value_template: "{{ has_value('sensor.living_room_station_outdoor_module_temperature') or has_value('sensor.openweathermap_temperature') }}"
  actions:
    - variables:
        local_temp_raw: "{{ states('sensor.living_room_station_outdoor_module_temperature') }}"
        local_temp: "{{ local_temp_raw | float(none) }}"
        owm_condition: "{{ states('sensor.openweathermap_condition') }}"
        owm_temp: "{{ states('sensor.openweathermap_temperature') | float(none) }}"
        owm_feels_like: "{{ states('sensor.openweathermap_feels_like_temperature') | float(none) }}"
        owm_humidity: "{{ states('sensor.openweathermap_humidity') | int(none) }}"
        owm_wind_speed: "{{ states('sensor.openweathermap_wind_speed') | float(none) }}"
        owm_wind_bearing: "{{ states('sensor.openweathermap_wind_bearing') | int(none) }}"
        owm_pressure: "{{ states('sensor.openweathermap_pressure') | float(none) }}"
        owm_rain: "{{ states('sensor.openweathermap_rain') | float(0) }}"
        owm_snow: "{{ states('sensor.openweathermap_snow') | float(0) }}"
        owm_uv_index: "{{ states('sensor.openweathermap_uv_index') | float(none) }}"
        current_temp_value: "{{ local_temp if local_temp is not none else owm_temp }}"
        temp_source: "{{ 'local sensor' if local_temp is not none else 'OpenWeatherMap' }}"
        wind_cardinals: [ 'N','NNE','NE','ENE','E','ESE','SE','SSE','S','SSW','SW','WSW','W','WNW','NW','NNW' ]
    - action: notify.mobile_app_iphone_12_pro
      data:
        title: "☀️ Daily Weather Report"
        message: >-
          Good morning!
          {% if current_temp_value is not none -%}
          Temp: {{ current_temp_value | round(1) }}°C (via {{ temp_source }}){% if owm_feels_like is not none and (local_temp is none or (owm_feels_like | round != current_temp_value | round)) %}, feels like {{ owm_feels_like | round(1) }}°C{% endif %}.
          {%- else -%}
          Outdoor temperature data is currently unavailable.
          {%- endif %}
          {%- if owm_condition not in ['unknown','unavailable'] %} Conditions: {{ owm_condition | title }}.{% endif %}
          {%- if owm_humidity is not none %} Humidity: {{ owm_humidity }}%.{% endif %}
          {%- if owm_wind_speed is not none and owm_wind_speed > 0 -%}
          Wind: {{ owm_wind_speed | round(1) }} {{ state_attr('sensor.openweathermap_wind_speed','unit_of_measurement') | default('units') }}
          {%- if owm_wind_bearing is not none -%}
          {% set wind_index = ((owm_wind_bearing / 22.5 + 0.5) | int % 16) -%}
          from {{ owm_wind_bearing }}° ({{ wind_cardinals[wind_index] }}).
          {%- else -%}.
          {%- endif -%}
          {%- endif -%}
          {%- if owm_rain > 0 or owm_snow > 0 -%}
          {% if owm_rain > 0 %} Rain: {{ owm_rain }} mm.{% endif %}
          {% if owm_snow > 0 %} Snow: {{ owm_snow }} mm.{% endif %}
          {%- endif -%}
          {%- if (owm_uv_index is not none and owm_uv_index >= 0) or owm_pressure is not none -%}
          {% if owm_uv_index is not none and owm_uv_index >= 0 %} UV Index: {{ owm_uv_index | round(1) }}.{% endif %}
          {% if owm_pressure is not none %} Pressure: {{ owm_pressure | round(1) }} {{ state_attr('sensor.openweathermap_pressure','unit_of_measurement') | default('hPa') }}.{% endif %}
          {%- endif -%}
        data:
          push:
            sound: default
  mode: single

- id: notify_first_solar_export_daily
  alias: Notify on First Solar Export of the Day
  description: Notify once per day when solar export exceeds 50 W
  triggers:
    - trigger: numeric_state
      entity_id: sensor.shellypro3em_08f9e0e88160_total_active_power
      below: -50
      for: 00:01:00
  conditions:
    - condition: state
      entity_id: input_boolean.solar_export_notified_today
      state: 'off'
  actions:
    - action: notify.notify
      data:
        title: "☀️ Solar Export Detected"
        message: "Currently exporting {{ trigger.to_state.state | float | round(1) }} W to the grid. First export today."
    - action: input_boolean.turn_on
      target:
        entity_id: input_boolean.solar_export_notified_today
  mode: single

- id: reset_solar_export_notified_daily
  alias: Reset Solar Export Daily Flag
  description: Resets the daily solar export notification flag at midnight
  triggers:
    - trigger: time
      at: '00:00:05'
  conditions: [ ]
  actions:
    - action: input_boolean.turn_off
      target:
        entity_id: input_boolean.solar_export_notified_today
  mode: single

- id: monthly_energy_report
  alias: Monthly Energy Report
  description: Sends a monthly energy report notification at 22:59 on the last day of the month
  triggers:
    - trigger: time
      at: '22:59:00'
  conditions:
    # Last day of the month
    - condition: template
      value_template: "{{ (now() + timedelta(days=1)).month != now().month }}"
    # Ensure at least one relevant sensor has a value
    - condition: or
      conditions:
        - condition: template
          value_template: "{{ has_value('sensor.monthly_solar_production') }}"
        - condition: template
          value_template: "{{ has_value('sensor.monthly_grid_import') }}"
        - condition: template
          value_template: "{{ has_value('sensor.monthly_grid_export') }}"
        - condition: template
          value_template: "{{ has_value('sensor.monthly_self_consumed_solar_energy') }}"
  actions:
    - variables:
        # Raw sensor values (keep None if unavailable)
        solar_production: "{{ states('sensor.monthly_solar_production') | float(none) }}"
        grid_import: "{{ states('sensor.monthly_grid_import') | float(none) }}"
        grid_export: "{{ states('sensor.monthly_grid_export') | float(none) }}"
        self_consumed_solar: "{{ states('sensor.monthly_self_consumed_solar_energy') | float(none) }}"
        # Units and context
        unit_energy: >-
          {{ state_attr('sensor.monthly_solar_production','unit_of_measurement')
             or state_attr('sensor.monthly_grid_import','unit_of_measurement')
             or state_attr('sensor.monthly_grid_export','unit_of_measurement')
             or 'kWh' }}
        month_name: "{{ now().strftime('%B %Y') }}"
        # Tariff (€/kWh) - adjust as needed
        electricity_price: 0.3370
        # Derived values with safe math
        total_home_usage: >-
          {% if self_consumed_solar is none and grid_import is none %}
          {{ none }}
          {% else %}
          {{ (self_consumed_solar if self_consumed_solar is not none else 0)
             + (grid_import if grid_import is not none else 0) }}
          {% endif %}
        amount_saved: >-
          {% if self_consumed_solar is not none %}
          {{ self_consumed_solar * electricity_price }}
          {% else %}
          {{ none }}
          {% endif %}
        self_consumption_rate: >-
          {% if solar_production is not none and solar_production > 0 and self_consumed_solar is not none %}
          {{ (self_consumed_solar / solar_production) * 100 }}
          {% else %}
          {{ none }}
          {% endif %}
        self_sufficiency_rate: >-
          {% if total_home_usage is not none and total_home_usage > 0 and self_consumed_solar is not none %}
          {{ (self_consumed_solar / total_home_usage) * 100 }}
          {% else %}
          {{ none }}
          {% endif %}
    - action: notify.notify
      data:
        title: "📊 Monthly Energy Report — {{ month_name }}"
        message: >-
          {% set has_any = (solar_production is not none) or (grid_import is not none) or (grid_export is not none) or (self_consumed_solar is not none) %}
          {% if has_any -%}
          {% if solar_production is not none %}Solar Production: {{ solar_production | round(1) }} {{ unit_energy }}
          {% endif -%}
          {% if self_consumed_solar is not none %}Self-Consumed Solar: {{ self_consumed_solar | round(1) }} {{ unit_energy }}
          {% endif -%}
          {% if amount_saved is not none %}Amount Saved: €{{ amount_saved | round(2) }}
          {% endif -%}
          {% if grid_import is not none %}Grid Import: {{ grid_import | round(1) }} {{ unit_energy }}
          {% endif -%}
          {% if grid_export is not none %}Grid Export: {{ grid_export | round(1) }} {{ unit_energy }}
          {% endif -%}
          {% if total_home_usage is not none %}Total Home Usage: {{ total_home_usage | round(1) }} {{ unit_energy }}
          {% endif -%}
          {% if self_consumption_rate is not none %}Solar Self-Consumption Rate: {{ self_consumption_rate | round(1) }}%
          {% endif -%}
          {% if self_sufficiency_rate is not none %}Energy Self-Sufficiency Rate: {{ self_sufficiency_rate | round(1) }}%
          {% endif -%}
          {%- else -%}
          ⚠️ Energy sensors are unavailable for the monthly report. Please check your configuration.
          {%- endif %}
        data:
          push:
            sound: default
    - action: logbook.log
      data:
        name: Monthly Energy Report
        message: Monthly energy report notification sent
  mode: single

- id: low_battery_and_maintenance_alert
  alias: Low Battery and Maintenance Alert
  description: Notify when battery levels are low or devices need maintenance.
  triggers:
    - trigger: numeric_state
      entity_id:
        - sensor.iphone_12_pro_battery_level
        - sensor.stades_ipad_battery_level
        - sensor.living_room_station_outdoor_module_battery
        - sensor.living_room_station_office_battery
        - sensor.living_room_station_hans_battery
        - sensor.living_room_station_bedroom_battery
        - sensor.living_room_station_rain_gauge_battery
        - sensor.living_room_station_smart_anemometer_battery
      below: 20
      for: 00:05:00
    - trigger: numeric_state
      entity_id:
        - sensor.mfc_l2710dw_black_toner_remaining
        - sensor.mfc_l2710dw_drum_remaining_lifetime
      below: 10
      for: 00:05:00
    - trigger: state
      entity_id:
        - binary_sensor.diskstation_security_status
        - binary_sensor.diskstation_drive_1_exceeded_max_bad_sectors
        - binary_sensor.diskstation_drive_1_below_min_remaining_life
      to: 'on'
      for: 00:05:00
    - trigger: template
      value_template: "{{ states('sensor.diskstation_volume_1_status') not in ['normal','unknown','unavailable'] }}"
      for: 00:05:00
    - trigger: template
      value_template: "{{ states('sensor.diskstation_drive_1_status') not in ['normal','unknown','unavailable'] }}"
      for: 00:05:00
  conditions: [ ]
  actions:
    - action: notify.mobile_app_iphone_12_pro
      data:
        title: Home Maintenance Alert
        message: >-
          {{ trigger.to_state.attributes.friendly_name }} needs attention.
          Current state: {{ trigger.to_state.state }} {{ trigger.to_state.attributes.unit_of_measurement | default('') }}.
  mode: queued

- id: ebike_track_onoff_timestamps
  alias: Ebike – Track last ON/OFF times
  description: Store timestamps when Ebike plug turns on/off
  triggers:
    - trigger: state
      entity_id: switch.shellyplugsg3_28372f2f1e04
  actions:
    - choose:
        - conditions: "{{ is_state('switch.shellyplugsg3_28372f2f1e04','on') }}"
          sequence:
            - action: input_datetime.set_datetime
              target:
                entity_id: input_datetime.ebike_last_on
              data:
                datetime: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"
        - conditions: "{{ is_state('switch.shellyplugsg3_28372f2f1e04','off') }}"
          sequence:
            - action: input_datetime.set_datetime
              target:
                entity_id: input_datetime.ebike_last_off
              data:
                datetime: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"
  mode: queued

- id: ebike_start_on_solar_excess
  alias: Ebike – Start on solar excess
  mode: single
  trigger:
    - platform: template
      value_template: >
        {{ states('sensor.excess_solar_export')|float(0) >= states('input_number.ebike_start_threshold_w')|float(200) }}
      for:
        minutes: "{{ states('input_number.ebike_start_dwell_min') | int(3) }}"
  condition:
    - condition: state
      entity_id: switch.shellyplugsg3_28372f2f1e04
      state: "off"
    - condition: template
      value_template: >
        {{ states('input_select.ebike_charge_state') in ['idle','paused'] }}
    - condition: template
      alias: Respect min pause
      value_template: >
        {% set min_pause = states('input_number.ebike_min_pause_min') | int(0) %}
        {% set t = states('input_datetime.ebike_last_off') %}
        {{ t in ['unknown','unavailable',''] or (as_datetime(t) and (now() - as_datetime(t)).total_seconds()/60 >= min_pause) }}
    - condition: template
      alias: Do not start during peak if blocked
      value_template: >
        {{ not (is_state('input_boolean.ebike_block_peak','on') and is_state('schedule.peak_demand','on')) }}
    - condition: template
      alias: Skip if already charged today
      value_template: >
        {% set target = states('input_number.ebike_daily_target_minutes') | float(0) %}
        {{ (states('sensor.ebike_charging_minutes_today')|float(0)) < target }}
  action:
    - service: switch.turn_on
      target: { entity_id: switch.shellyplugsg3_28372f2f1e04 }
    - service: input_select.select_option
      target: { entity_id: input_select.ebike_charge_state }
      data: { option: charging }
    - service: logbook.log
      data:
        name: Ebike Charger
        message: "Started charging on solar excess."
        entity_id: switch.shellyplugsg3_28372f2f1e04
    - service: persistent_notification.create
      data:
        title: Ebike charging
        message: "Started charging using solar excess."

- id: ebike_stop_on_low_solar
  alias: Ebike – Stop on low solar
  mode: single
  trigger:
    - platform: template
      value_template: >
        {{ states('sensor.excess_solar_export')|float(0) < states('input_number.ebike_stop_threshold_w')|float(100) }}
      for:
        minutes: "{{ states('input_number.ebike_stop_dwell_min') | int(2) }}"
  condition:
    - condition: state
      entity_id: switch.shellyplugsg3_28372f2f1e04
      state: "on"
    - condition: template
      alias: Respect min run time
      value_template: >
        {% set min_run = states('input_number.ebike_min_charge_min') | int(0) %}
        {% set t = states('input_datetime.ebike_last_on') %}
        {{ t in ['unknown','unavailable',''] or (as_datetime(t) and (now() - as_datetime(t)).total_seconds()/60 >= min_run) }}
    - condition: template
      alias: Keep charging if in allowed off-peak backup window
      value_template: >
        {{ not (is_state('input_boolean.ebike_offpeak_backup','on') and is_state('schedule.ebike_offpeak','on')) }}
  action:
    - service: switch.turn_off
      target: { entity_id: switch.shellyplugsg3_28372f2f1e04 }
    - service: input_select.select_option
      target: { entity_id: input_select.ebike_charge_state }
      data: { option: paused }
    - service: logbook.log
      data:
        name: Ebike Charger
        message: "Paused charging due to low solar."
        entity_id: switch.shellyplugsg3_28372f2f1e04

- id: ebike_offpeak_backup_start
  alias: Ebike – Start on off-peak backup
  mode: single
  trigger:
    - platform: state
      entity_id: schedule.ebike_offpeak
      to: "on"
  condition:
    - condition: state
      entity_id: input_boolean.ebike_offpeak_backup
      state: "on"
    - condition: state
      entity_id: switch.shellyplugsg3_28372f2f1e04
      state: "off"
    - condition: template
      alias: Not in peak window if blocked
      value_template: >
        {{ not (is_state('input_boolean.ebike_block_peak','on') and is_state('schedule.peak_demand','on')) }}
    - condition: template
      alias: Respect min pause
      value_template: >
        {% set min_pause = states('input_number.ebike_min_pause_min') | int(0) %}
        {% set t = states('input_datetime.ebike_last_off') %}
        {{ t in ['unknown','unavailable',''] or (as_datetime(t) and (now() - as_datetime(t)).total_seconds()/60 >= min_pause) }}
    - condition: template
      alias: Only if daily target not yet reached
      value_template: >
        {% set target = states('input_number.ebike_daily_target_minutes') | float(0) %}
        {{ (states('sensor.ebike_charging_minutes_today')|float(0)) < target }}
  action:
    - service: switch.turn_on
      target: { entity_id: switch.shellyplugsg3_28372f2f1e04 }
    - service: input_select.select_option
      target: { entity_id: input_select.ebike_charge_state }
      data: { option: charging }
    - service: logbook.log
      data:
        name: Ebike Charger
        message: "Started off-peak backup charging."
        entity_id: switch.shellyplugsg3_28372f2f1e04

- id: ebike_stop_on_peak
  alias: Ebike – Stop when peak demand starts
  mode: single
  trigger:
    - platform: state
      entity_id: schedule.peak_demand
      to: "on"
  condition:
    - condition: state
      entity_id: input_boolean.ebike_block_peak
      state: "on"
    - condition: state
      entity_id: switch.shellyplugsg3_28372f2f1e04
      state: "on"
    - condition: template
      alias: Respect min run time
      value_template: >
        {% set min_run = states('input_number.ebike_min_charge_min') | int(0) %}
        {% set t = states('input_datetime.ebike_last_on') %}
        {{ t in ['unknown','unavailable',''] or (as_datetime(t) and (now() - as_datetime(t)).total_seconds()/60 >= min_run) }}
  action:
    - service: switch.turn_off
      target: { entity_id: switch.shellyplugsg3_28372f2f1e04 }
    - service: input_select.select_option
      target: { entity_id: input_select.ebike_charge_state }
      data: { option: paused }
    - service: logbook.log
      data:
        name: Ebike Charger
        message: "Stopped due to peak demand window."
        entity_id: switch.shellyplugsg3_28372f2f1e04

- id: ebike_stop_when_target_reached
  alias: Ebike – Stop when daily target reached
  mode: restart
  trigger:
    - platform: template
      value_template: >
        {% set target = states('input_number.ebike_daily_target_minutes') | float(0) %}
        {{ (states('sensor.ebike_charging_minutes_today')|float(0)) >= target and is_state('switch.shellyplugsg3_28372f2f1e04','on') }}
  action:
    - service: switch.turn_off
      target: { entity_id: switch.shellyplugsg3_28372f2f1e04 }
    - service: input_select.select_option
      target: { entity_id: input_select.ebike_charge_state }
      data: { option: charged }
    - service: persistent_notification.create
      data:
        title: Ebike charging
        message: "Charging target reached for today."

- id: ebike_daily_reset
  alias: Ebike – Daily reset
  mode: single
  trigger:
    - platform: time
      at: "00:05:00"
  action:
    - service: input_select.select_option
      target: { entity_id: input_select.ebike_charge_state }
      data: { option: idle }

- id: ebike_sync_state_on_manual
  alias: Ebike – Sync state with manual switch
  mode: queued
  trigger:
    - platform: state
      entity_id: switch.shellyplugsg3_28372f2f1e04
  condition: [ ]
  action:
    - choose:
        - conditions:
            - condition: state
              entity_id: switch.shellyplugsg3_28372f2f1e04
              state: "on"
          sequence:
            - service: input_select.select_option
              target:
                entity_id: input_select.ebike_charge_state
              data:
                option: charging
        - conditions:
            - condition: state
              entity_id: switch.shellyplugsg3_28372f2f1e04
              state: "off"
            - condition: state
              entity_id: input_select.ebike_charge_state
              state: "charged"
          sequence: [ ]
      default:
        - service: input_select.select_option
          target:
            entity_id: input_select.ebike_charge_state
          data:
            option: idle
